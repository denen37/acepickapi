"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const sector_1 = require("../controllers/sector");
const professions_1 = require("../controllers/professions");
const professionals_1 = require("../controllers/professionals");
const cooperates_1 = require("../controllers/cooperates");
const Jobs_1 = require("../controllers/Jobs");
const enum_1 = require("../utils/enum");
const allowRoles_1 = require("../middlewares/allowRoles");
const test_1 = require("../controllers/test");
const location_1 = require("../controllers/location");
const client_1 = require("../controllers/client");
const account_1 = require("../controllers/account");
const wallet_1 = require("../controllers/wallet");
const transactions_1 = require("../controllers/transactions");
const payment_1 = require("../controllers/payment");
const education_1 = require("../controllers/education");
const certification_1 = require("../controllers/certification");
const experience_1 = require("../controllers/experience");
const portfolio_1 = require("../controllers/portfolio");
const profiles_1 = require("../controllers/profiles");
const product_1 = require("../controllers/product");
const category_1 = require("../controllers/category");
const upload_1 = require("../services/upload");
const upload_2 = require("../controllers/upload");
const routes = (0, express_1.Router)();
routes.get("/sectors", sector_1.getSectors);
routes.get("/sectors/details", sector_1.getSectorsMetrics);
routes.post("/sectors", sector_1.createSector);
routes.put("/sectors/:id", sector_1.updateSector);
routes.delete("/sectors/:id", sector_1.deleteSector);
routes.get("/clients/:id", (0, allowRoles_1.allowRoles)(enum_1.UserRole.CLIENT, enum_1.UserRole.PROFESSIONAL), client_1.getClient);
routes.get('/profile', profiles_1.AccountInfo);
routes.post('/profile', profiles_1.updateProfile);
routes.get("/education", education_1.getEducation);
routes.post("/education", education_1.addEducation);
routes.put("/education/:id", education_1.updateEducation);
routes.delete("/education/:id", education_1.deleteEducation);
routes.get("/certificates", certification_1.getCertificates);
routes.post("/certificates", certification_1.addCertificate);
routes.put("/certificates/:id", certification_1.updateCertificate);
routes.delete("/certificates/:id", certification_1.deleteCertificate);
routes.get("/experiences", experience_1.getExperiences);
routes.post("/experiences", experience_1.addExperience);
routes.put("/experiences/:id", experience_1.updateExperience);
routes.delete("/experiences/:id", experience_1.deleteExperience);
routes.get("/portfolios", portfolio_1.getPortfolios);
routes.post("/portfolios", portfolio_1.addPortfolio);
routes.put("/portfolios/:id", portfolio_1.updatePortfolio);
routes.delete("/portfolios/:id", portfolio_1.deletePortfolio);
routes.get("/professions", professions_1.getProfessions);
routes.get("/professions/:id", professions_1.getProfessionById);
routes.post("/professions", professions_1.createProfession);
routes.put("/professions/:id", professions_1.updateProfession);
routes.delete("/professions/:id", professions_1.deleteProfession);
routes.get("/professionals", professionals_1.getProfessionals);
routes.get('/professionals/:professionalId', professionals_1.getProfessionalById); // Allow any role to get professional by userId
routes.get("/cooperates", cooperates_1.getCooperates);
routes.get('/jobs/latest', Jobs_1.getLatestJob);
routes.get('/jobs', (0, allowRoles_1.allowRoles)(enum_1.UserRole.CLIENT, enum_1.UserRole.PROFESSIONAL), Jobs_1.getJobs);
routes.get('/jobs/:id', (0, allowRoles_1.allowRoles)('*'), Jobs_1.getJobById);
routes.post('/jobs', (0, allowRoles_1.allowRoles)(enum_1.UserRole.CLIENT), Jobs_1.createJobOrder);
routes.put('/jobs/response/:jobId', (0, allowRoles_1.allowRoles)(enum_1.UserRole.PROFESSIONAL), Jobs_1.respondToJob);
routes.post('/jobs/invoice', (0, allowRoles_1.allowRoles)(enum_1.UserRole.PROFESSIONAL), Jobs_1.generateInvoice);
routes.put('/jobs/invoice/:jobId', (0, allowRoles_1.allowRoles)(enum_1.UserRole.PROFESSIONAL), Jobs_1.updateInvoice);
routes.get('/jobs/invoice/:jobId', (0, allowRoles_1.allowRoles)(enum_1.UserRole.PROFESSIONAL, enum_1.UserRole.CLIENT), Jobs_1.viewInvoice);
//routes.post('/jobs/payment', allowRoles(UserRole.CLIENT), payforJob);
routes.post('/jobs/complete/:jobId', (0, allowRoles_1.allowRoles)(enum_1.UserRole.PROFESSIONAL), Jobs_1.completeJob);
routes.post('/jobs/approve/:jobId', (0, allowRoles_1.allowRoles)(enum_1.UserRole.CLIENT), Jobs_1.approveJob);
routes.post('/jobs/dispute/:jobId', (0, allowRoles_1.allowRoles)(enum_1.UserRole.CLIENT), Jobs_1.disputeJob);
routes.post('/jobs/cancel/:jobId', (0, allowRoles_1.allowRoles)(enum_1.UserRole.CLIENT), Jobs_1.cancelJob);
routes.put('jobs/update/:jobId', (0, allowRoles_1.allowRoles)(enum_1.UserRole.CLIENT), Jobs_1.updateJob);
routes.post('/notification-test', test_1.testNotification);
routes.post('/send-sms', test_1.sendSMSTest);
routes.post('/send-email', test_1.sendEmailTest);
routes.post('/nearest-person', test_1.findPersonsNearby);
routes.put('/location', location_1.updateLocation);
routes.get('/accounts/banks', (0, allowRoles_1.allowRoles)(enum_1.UserRole.PROFESSIONAL, enum_1.UserRole.CLIENT), account_1.getBanks);
routes.post('/accounts', (0, allowRoles_1.allowRoles)(enum_1.UserRole.PROFESSIONAL, enum_1.UserRole.CLIENT), account_1.addAccount);
routes.get('/accounts', (0, allowRoles_1.allowRoles)(enum_1.UserRole.PROFESSIONAL, enum_1.UserRole.CLIENT), account_1.getAccounts);
routes.post('/accounts/resolve', (0, allowRoles_1.allowRoles)(enum_1.UserRole.PROFESSIONAL, enum_1.UserRole.CLIENT), account_1.resolveAccount);
routes.put('/accounts/:recipientCode', (0, allowRoles_1.allowRoles)(enum_1.UserRole.PROFESSIONAL, enum_1.UserRole.CLIENT), account_1.updateAccount);
routes.delete('/accounts/:recipientCode', (0, allowRoles_1.allowRoles)(enum_1.UserRole.PROFESSIONAL, enum_1.UserRole.CLIENT), account_1.deleteAccount);
routes.post('/create-wallet', /*allowRoles(UserRole.SEEKER),*/ wallet_1.createWallet);
routes.get('/view-wallet', /*allowRoles(UserRole.SEEKER),*/ wallet_1.viewWallet);
routes.post('/debit-wallet', /*allowRoles(UserRole.SEEKER),*/ wallet_1.debitWallet);
routes.post('/credit-wallet', /*allowRoles(UserRole.SEEKER),*/ wallet_1.creditWallet);
routes.post('/set-pin', /*allowRoles(UserRole.SEEKER),*/ wallet_1.setPin);
routes.post('/reset-pin', wallet_1.resetPin);
routes.post('/forgot-pin', wallet_1.forgotPin);
routes.get('/transactions', /*allowRoles(UserRole.SEEKER, UserRole.PROVIDER),*/ transactions_1.getAllTransactions);
routes.get('/transactions/:id', /*allowRoles(UserRole.SEEKER, UserRole.PROVIDER),*/ transactions_1.getTransactionById);
routes.post('/paystack/webhook', payment_1.handlePaystackWebhook);
routes.post('/payments/initiate', /*allowRoles(UserRole.SEEKER),*/ payment_1.initiatePayment);
routes.post('/payments/verify/:ref', /*allowRoles(UserRole.SEEKER),*/ payment_1.verifyPayment);
routes.post('/transfer/initiate', /*allowRoles(UserRole.PROVIDER),*/ payment_1.initiateTransfer);
routes.post('/transfer/finalize', payment_1.finalizeTransfer);
routes.post('/transfer/verify/:ref', payment_1.verifyTransfer);
routes.post('/products/upload', upload_1.uploads.array('product', 5), upload_2.uploadFiles);
routes.get('/products/mine', product_1.getMyProducts);
routes.get('/products/transactions/:status', product_1.getProductTransactions);
routes.get('/products', product_1.getProducts);
routes.post('/products', product_1.addProduct);
routes.put('/products/:id', product_1.updateProduct);
routes.delete('/products/:id', product_1.deleteProduct);
routes.get('/categories', category_1.getCategories);
routes.post('/categories', category_1.addCategory);
routes.put('/categories/:id', category_1.updateCategory);
routes.delete('/categories/:id', category_1.deleteCategory);
exports.default = routes;
